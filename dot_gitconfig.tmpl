{{ template "banner.tmpl" "Git - Global config" }}

# ---
# Sources:
#  - https://git-scm.com/docs/git-config
#  - https://gist.github.com/tdd/470582
#  - https://gist.github.com/pyrtsa/4148804

# ---
[user]
  email = {{ .email }}
  name = {{ .full_name }}
{{- if .gpg.enable_git_sign }}  signingkey = {{ .gpg.fingerprint }}{{ end }}

[color]
  # Enable colors in color-supporting terminals
  ui = auto

[alias]
  # List available aliases
  aliases = "!git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'"
  # Show default branch
  main = branch --remotes --list "'*/HEAD'" --format "'%(symref:lstrip=3)'"
  # Display tree-like log, because default log is a pain…
  lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
  # Useful when you have to update your last commit
  # with staged files without editing the commit message.
  oops = commit --amend --no-edit
  # Ensure that force-pushing won't lose someone else's work (only mine).
  push-with-lease = push --force-with-lease
  # Rebase won’t trigger hooks on each "replayed" commit.
  # This is an ugly hack that will replay each commit during rebase with the
  # standard `commit` command which will trigger hooks.
  rebase-with-hooks = rebase -x 'git reset --soft HEAD~1 && git commit -C HEAD@{1}'
  # List local commits that were not pushed to remote repository
  review-local = lg "@{push}.."
  # Edit last commit message
  reword = commit --amend
  # Set the current branch upstream
  set-upstream = branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`
  # Undo last commit but keep changed files in stage
  uncommit = reset --soft HEAD~1
  # Remove file(s) from Git but not from disk
  untrack = rm --cache --

  # List files aliases
  ls           = status -suno
  ls-modified  = status --porcelain -uno | awk 'match($1, /M/) {print $2}'
  ls-added     = status --porcelain -uno | awk 'match($1, /A/) {print $2}'
  ls-deleted   = status --porcelain -uno | awk 'match($1, /D/) {print $2}'
  ls-renamed   = status --porcelain -uno | awk 'match($1, /R/) {print $2}'
  ls-copied    = status --porcelain -uno | awk 'match($1, /C/) {print $2}'
  ls-updated   = status --porcelain -uno | awk 'match($1, /U/) {print $2}'
  ls-staged    = status --porcelain -uno | grep -P '^[MA]' | awk '{ print $2 }'
  ls-untracked = status --porcelain -uall | awk '$1 == \"??\" {print $2}'
  ls-ignored   = ls-files --others --ignored --exclude-standard

  # Prune all local branches not available on remote
  prune-all = "!git remote prune origin && git branch --merged | grep -v '^*' | xargs git branch -d"

# ---
[core]
  # editor = code --wait # TODO: check if vim can do that much better than vscode
  excludesfile = {{ .chezmoi.homeDir }}/.gitignore

  # Paginate output with `delta` by default
  pager = {{- if lookPath "delta" }} delta --side-by-side |{{ end }} less --tabs=4 -RFX
  # Don't consider trailing space change as a cause for merge conflicts
  whitespace = -trailing-space

# ---
[branch]
  # autoSetupMerge controls whether `git branch` and `git checkout -b`
  # imply the `--track` option
  #autoSetupMerge = always
  # autoSetupRebase controls whether new branches should be set up to
  # be rebased upon `git pull`
  autoSetupRebase = always

[diff]
  # Use better, descriptive initials (c, i, w) instead of a/b.
  mnemonicPrefix = true
  # Show renames/moves as such
  renames = true
  # When using --word-diff, assume --word-diff-regex=.
  wordRegex = .
  # Display submodule-related information (commit listings)
  submodule = log
  # Use VSCode as default diff tool when running `git diff-tool`
  tool = vscode

[difftool "vscode"]
  cmd = code --wait --diff $LOCAL $REMOTE

[fetch]
  # Auto-fetch submodule changes (sadly, won't auto-update)
  recurseSubmodules = on-demand

[mergetool]
  # Clean up backup files created by merge tools on tool exit
  keepBackup = false
  # Clean up temp files created by merge tools on tool exit
  keepTemporaries = false
  # Put the temp files in a dedicated dir anyway
  writeToTemp = true
  # Auto-accept file prompts when launching merge tools
  prompt = false

[pull]
  # This is GREAT… when you know what you're doing and are careful
  # not to pull --no-rebase over a local line containing a true merge.
  # rebase = true
  # This option, which does away with the one gotcha of
  # auto-rebasing on pulls, is only available from 1.8.5 onwards.
  # rebase = preserve
  # WARNING! This option, which is the latest variation, is only
  # available from 2.18 onwards.
  rebase = merges

[push]
  # Default push should only push the current branch to its push target, regardless of its remote name
  default = upstream
  # When pushing, also push tags whose commit-ishs are now reachable upstream
  followTags = true

[rebase]
  # Rebase advanced usage.
  # Automagically reorder and prefix your commands while doing an interactive
  # rebase. This has to be used with `--fixup` and/or `--squash` options for
  # `git commit`.
  autoSquash = false
  # Automatically stash current WD and stage when running rebase
  # then you won't have to manually `git stash push` and `git stash pop`
  # after and before your rebase.
  autoStash = true

# ---
[grep]
  break = true
  heading = true
  lineNumber = true
  # Consider most regexes to be ERE
  extendedRegexp = true

[log]
  # Use abbrev SHAs whenever possible/relevant instead of full 40 chars
  abbrevCommit = true
  # Automatically --follow when given a single path
  follow = true
  # Disable decorate for reflog
  # (because there is no dedicated `reflog` section available)
  decorate = false

[status]
  # Display submodule rev change summaries in status
  submoduleSummary = true
  # Recursively traverse untracked directories to display all contents
  showUntrackedFiles = all

[tag]
  # Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
  sort = version:refname
[versionsort]
  suffix = -pre
  suffix = .pre
  suffix = -beta
  suffix = .beta
  suffix = -rc
  suffix = .rc

# ---
[url "git@gitlab.com:"]
  insteadOf = https://gitlab.com/
[url "git@github.com:"]
  insteadOf = https://github.com/

{{- $wkspaces := (joinPath .chezmoi.homeDir "Workspaces") }}
{{ if stat $wkspaces }}
# ---
{{-   range (output "ls" $wkspaces | trim | split "\n") }}
[includeIf "gitdir:{{joinPath $wkspaces .}}"]
  path = {{ joinPath $wkspaces . ".gitconfig" }}
{{   end }}
{{- end }}
